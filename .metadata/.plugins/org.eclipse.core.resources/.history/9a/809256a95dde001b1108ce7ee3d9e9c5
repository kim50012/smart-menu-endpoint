package com.basoft.eorder.batch.job.threads;

import com.basoft.eorder.cache.loading.retail.thread.subthread.CacheRetail3ZSetThread20200714;
import com.basoft.eorder.common.CommonConstants;
import com.basoft.eorder.domain.ProductRepository;
import com.basoft.eorder.domain.model.ProductSaleVolume;
import com.basoft.eorder.domain.model.Store;
import com.basoft.eorder.domain.model.saleCount.ProductSaleDayVolume;
import com.basoft.eorder.interfaces.query.OrderQuery;
import com.basoft.eorder.interfaces.query.retail.api.RetailProductQuery;
import com.basoft.eorder.interfaces.query.storecategory.StoreCategoryQuery;
import com.basoft.eorder.util.RedisUtil;
import com.google.common.collect.Maps;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Map;

/**
 * 1、每日更新商户的产品销量信息到数据库；
 * 2、每日更新商户的产品信息中的销量缓存
 *
 * @see com.basoft.eorder.batch.job.EOrderStoreBatchJob#storeProductSales()
 */
@Slf4j
public class StoreProductSalesThread implements Runnable {
    private Store store;

    private OrderQuery orderQuery;

    private ProductRepository productRepository;

    private RetailProductQuery retailProductQuery;

    private RedisUtil redisUtil;

    private StoreCategoryQuery storeCategoryQuery;

    public StoreProductSalesThread(Store store, OrderQuery orderQuery, ProductRepository productRepository
            , RetailProductQuery retailProductQuery, RedisUtil redisUtil, StoreCategoryQuery storeCategoryQuery) {
        this.store = store;
        this.orderQuery = orderQuery;
        this.productRepository = productRepository;
        this.retailProductQuery = retailProductQuery;
        this.redisUtil = redisUtil;
        this.storeCategoryQuery = storeCategoryQuery;
    }

    @Override
    public void run() {
        /***********************************一、计算商户产品的历史销量-start*************************************/
        // 查询商户的产品销量
        Map<String, Object> param = Maps.newHashMap();
        param.put("storeId", store.id());
        List<ProductSaleVolume> saleVolumes = orderQuery.getProductSaleVolumes(param);

        // 更新商户的产品销量
        productRepository.updateProSales(saleVolumes);
        /***********************************一、计算商户产品的历史销量-end*************************************/




        /***********************************二、记录商户产品的昨日销量-start*************************************/
        // 查询商户产品的昨日销量
        List<ProductSaleDayVolume> saleDayVolumes = orderQuery.getProductSaleDayVolumes(param);

        // 更新商户产品的昨日销量
        productRepository.updateProDaySales(saleDayVolumes);
        /***********************************二、记录商户产品的昨日销量-end*************************************/





        /***********************************三、根据商户产品的日销量信息计算出按年按月排名前十的商品到缓存中-start*************************************/
        // 查询商户de年销量Top10
        List<ProductSaleDayVolume> saleVolumeYearTop10Products = orderQuery.getSaleVolumeYearTop10ProductList(param);
        // 查询商户de月销量Top10
        List<ProductSaleDayVolume> saleVolumeMonthTop10Products = orderQuery.getSaleVolumeMonthTop10ProductList(param);
        // 查询商户de周销量Top10
        List<ProductSaleDayVolume> saleVolumeWeekTop10Products = orderQuery.getSaleVolumeWeekTop10ProductList(param);

        String yearCacheKey = CommonConstants.SALE_VOLUME_YEAR_TOP10_PRODUCT + store.id();
        // 清理原有年Top10产品信息
        redisUtil.del(yearCacheKey);
        // 放入最新的年Top10产品信息
        if (saleVolumeYearTop10Products != null && saleVolumeYearTop10Products.size() > 0) {
            redisUtil.lrSetList(yearCacheKey, saleVolumeYearTop10Products);
        }

        String monthCacheKey = CommonConstants.SALE_VOLUME_MONTH_TOP10_PRODUCT + store.id();
        // 清理原有月Top10产品信息
        redisUtil.del(monthCacheKey);
        // 放入最新的月Top10产品信息
        if (saleVolumeMonthTop10Products != null && saleVolumeMonthTop10Products.size() > 0) {
            redisUtil.lrSetList(monthCacheKey, saleVolumeMonthTop10Products);
        }

        String weekCacheKey = CommonConstants.SALE_VOLUME_WEEK_TOP10_PRODUCT + store.id();
        // 清理原有周Top10产品信息
        redisUtil.del(weekCacheKey);
        // 放入最新的周Top10产品信息
        if (saleVolumeWeekTop10Products != null && saleVolumeWeekTop10Products.size() > 0) {
            redisUtil.lrSetList(weekCacheKey, saleVolumeWeekTop10Products);
        }
        /***********************************三、根据商户产品的日销量信息计算出按年按月排名前十的商品到缓存中-end*************************************/





        /***********************************三、更新该商户的销量ZSet-start*************************************/
        // 更新缓存------更新该商户的销量ZSet
        try {
            Thread thread = new Thread(new CacheRetail3ZSetThread20200714(store, retailProductQuery, redisUtil, storeCategoryQuery));
            thread.start();
        } catch (Exception e) {
            log.error("更新商户销量排序缓存线程异常，[商户ID]=" + store.id() + "，异常信息为：" + e.getMessage(), e);
        }
        /***********************************三、更新该商户的销量ZSet-end*************************************/
    }
}