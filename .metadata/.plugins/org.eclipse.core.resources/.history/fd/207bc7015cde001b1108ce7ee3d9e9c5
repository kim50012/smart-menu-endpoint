package com.basoft.eorder.batch.job;

import com.basoft.eorder.batch.job.service.IAgentBatchService;
import com.basoft.eorder.batch.job.threads.AgentCADailySettlementThread;
import com.basoft.eorder.batch.job.threads.AgentCAMonthSettlementThread;
import com.basoft.eorder.batch.job.threads.AgentSADailySettlementThread;
import com.basoft.eorder.batch.job.threads.AgentSAMonthSettlementThread;
import com.basoft.eorder.batch.lock.RedissonUtil;
import com.basoft.eorder.domain.AgentRepository;
import com.basoft.eorder.domain.model.agent.Agent;
import com.basoft.eorder.interfaces.query.agent.AgentQuery;
import com.basoft.eorder.util.DateUtil;
import lombok.extern.slf4j.Slf4j;
import org.redisson.api.RLock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * EOrderAgentBatchJob代理商定时任务
 *
 * @author Mentor
 * @version 1.0
 * @since 20191101
 */
@Slf4j
@Component
public class EOrderAgentBatchJob {
    @Autowired
    private RedissonUtil redissonUtil;

    @Autowired
    private AgentQuery agentQuery;

    @Autowired
    private AgentRepository agentRepository;

    @Autowired
    private IAgentBatchService agentBatchService;

    /**
     * 【SA代理商月度结算】
     * SA商户代理商月度结算定时任务
     * !!!特别说明，该任务必须在任务“商户计费信息定时处理任务”定时任务之后。因为SA代理商结算时要依据代理商户的结算信息
     *
     * 每月2号1点执行任务  0 0 1 2 * ?
     *
     * @date 20191008
     */
//    @Scheduled(cron = "0 0 1 2 * ?") //生产
    // @Scheduled(cron = "0 20 16 12 * ?")
    // @Scheduled(cron = "0 0/10 * * * ?")
    public void storeAgentMonthSettlement() {
//        log.info("<><><><><><><><><>><><><><>开始SA代理商月度结算，定时任务启动<><><><><><><><><>><><><><>");
        String batchKey = "STORE_AGENT_MONTH_SETTLEMENT_KEY";
        RLock lock = redissonUtil.getRLock(batchKey);
        boolean getLock = false;
        try {
            // 零等待取锁，加锁120秒
            if (getLock = lock.tryLock(0, 120, TimeUnit.SECONDS)) {
                // 获取所有SA代理商列表
                List<Agent> agentList = agentQuery.getUsingAgentList("1");
//                log.info("【SA代理商月度结算】待结算SA代理商数量为：" + agentList.size());

                // 上一个月所在年份
                int lastYear = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now().minus(1, ChronoUnit.MONTHS), "yyyy"));

                // 上一个月份
                int lastMonth = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now().minus(1, ChronoUnit.MONTHS), "MM"));

                // 暂时无用
                int year = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now(), "yyyy"));
                // 暂时无用
                int month = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now(), "MM"));
//                log.info("【SA代理商月度结算】年月信息lastYear（上月所在年），lastMonth（上月），year（当前月所在年），month（当前月）::" + lastYear + ", "
//                        + lastMonth + ", " + year + ", " + month);

                String monthStartTime = DateUtil.getFirstDayOfMonth(lastYear, lastMonth) + " 00:00:00";
                String monthEndTime = DateUtil.getLastDayOfMonth(lastYear, lastMonth) + " 23:59:59";
//                log.info("【SA代理商月度结算】SA代理商结算月起始时间和截止时间::" + monthStartTime + ", " + monthEndTime);

                for (Agent agent : agentList) {
                    /*********************************结算日期区间界定-start****************************************/
                    Map<String, Object> checkResult = checkContractDate(agent.getContractSt(), agent.getContractEd()
                            , monthStartTime.substring(0, 10), monthEndTime.substring(0, 10));
                    boolean isContinueTask = (boolean) checkResult.get("isContinueTask");
                    if (isContinueTask) {
                        monthStartTime = (String) checkResult.get("monthStartTime");
                        monthEndTime = (String) checkResult.get("monthEndTime");
//                        log.info("【SA代理商月度结算】SA代理商结算【有效】起始时间和截止时间::" + monthStartTime + ", " + monthEndTime);
                    } else {
                        continue;
                    }
                    /*********************************结算日期区间界定-end****************************************/

                    try {
                        Thread thread = new Thread(new AgentSAMonthSettlementThread(agentBatchService,
                                agent, lastYear, lastMonth, year, month, monthStartTime, monthEndTime));
                        thread.start();
                    } catch (Exception e) {
//                        log.error("【SA代理商月度结算】SA代理商月度结算线程异常，[代理商ID]=" + agent.getAgtId() + "，异常信息为：" + e.getMessage(), e);
                    }
                    // 休眠3秒，减轻数据库的压力
                    Thread.sleep(3000);
                }
            } else {
//                log.info("【SA代理商月度结算】没有获取到定时任务执行锁:{},ThreadName :{}", batchKey, Thread.currentThread().getName());
            }
        } catch (InterruptedException e) {
//            log.error("【SA代理商月度结算】获取分布式锁异常：" + e.getMessage(), e);
        } finally {
            // 无锁返回
            if (!getLock) {
                return;
            }

            // 有锁进行释放，并进行延时40秒释放
            try {
                Thread.sleep(40000);
            } catch (InterruptedException e) {
                e.printStackTrace();
//                log.error("【SA代理商月度结算】延时释放执行锁异常：" + e.getMessage(), e);
            }

            if (lock != null && lock.isLocked() && lock.isHeldByCurrentThread()) {
                lock.unlock();
//                log.info("【SA代理商月度结算】释放锁完成，锁名称：{},当前线程名称ThreadName :{}", batchKey, Thread.currentThread().getName());
            } else {
//                log.info("【SA代理商月度结算】无锁可释放，当前线程名称ThreadName :{}！！！！！！", Thread.currentThread().getName());
            }
        }
//        log.info("<><><><><><><><><>><><><><>SA代理商月度结算定时任务主线程执行结束<><><><><><><><><>><><><><>");
    }

    /**
     * 【CA代理商月度结算】
     * CA用户代理商月度结算
     * !!!特别说明，该任务必须在任务“商户计费信息定时处理任务”定时任务之后。因为CA代理商结算时要依据代理商户的结算信息
     *
     * 每月3号1点执行任务  0 0 1 3 * ?
     *
     * @date 20191008
     */
//    @Scheduled(cron = "0 1 3 * * ?") //生产
    // @Scheduled(cron = "0 24 15 14 * ?")
    // @Scheduled(cron = "0 0/20 * * * ?")
    public void customerAgentMonthSettlement() {
//        log.info("<><><><><><><><><>><><><><>开始CA代理商月度结算，定时任务启动<><><><><><><><><>><><><><>");
        String batchKey = "CUSTOMER_AGENT_MONTH_SETTLEMENT_KEY";
        RLock lock = redissonUtil.getRLock(batchKey);
        boolean getLock = false;
        try {
            // 零等待取锁，加锁120秒
            if (getLock = lock.tryLock(0, 120, TimeUnit.SECONDS)) {
                // 获取所有CA代理商列表
                List<Agent> agentList = agentQuery.getUsingAgentList("2");
//                log.info("【CA代理商月度结算】待结算CA代理商数量为：" + agentList.size());

                // 上一个月所在年份
                int lastYear = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now().minus(1, ChronoUnit.MONTHS), "yyyy"));

                // 上一个月份
                int lastMonth = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now().minus(1, ChronoUnit.MONTHS), "MM"));

                // 暂时无用
                int year = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now(), "yyyy"));
                // 暂时无用
                int month = Integer.valueOf(DateUtil.getFormatStr(LocalDateTime.now(), "MM"));
//                log.info("【CA代理商月度结算】年月信息lastYear（上月所在年），lastMonth（上月），year（当前月所在年），month（当前月）::" + lastYear + ", "
//                        + lastMonth + ", " + year + ", " + month);

                String monthStartTime = DateUtil.getFirstDayOfMonth(lastYear, lastMonth) + " 00:00:00";
                String monthEndTime = DateUtil.getLastDayOfMonth(lastYear, lastMonth) + " 23:59:59";
//                log.info("【CA代理商月度结算】CA代理商结算月起始时间和截止时间::" + monthStartTime + ", " + monthEndTime);

                for (Agent agent : agentList) {
                    /*********************************结算日期区间界定-start****************************************/
                    /*
                    // CA代理商的起始合同时间对monthStartTime没有影响（因为只有代理商拉来客户后才有订单），但是结束合同时间对monthEndTime有影响
                    if(agent.getContractEd().compareTo(monthEndTime.substring(0,10)) <= 0){
                        // 如果代理商合同结束时间小于等于结算月的最后一天
                        monthEndTime = agent.getContractEd() + " 23:59:59";
                        log.info("【CA代理商月度结算】CA代理商结算月修正为截止时间::" + monthEndTime);
                    }*/
                    Map<String, Object> checkResult = checkContractDate(agent.getContractSt(), agent.getContractEd()
                            , monthStartTime.substring(0, 10), monthEndTime.substring(0, 10));
                    boolean isContinueTask = (boolean) checkResult.get("isContinueTask");
                    if (isContinueTask) {
                        monthStartTime = (String) checkResult.get("monthStartTime");
                        monthEndTime = (String) checkResult.get("monthEndTime");
//                        log.info("【SA代理商月度结算】SA代理商结算【有效】起始时间和截止时间::" + monthStartTime + ", " + monthEndTime);
                    } else {
                        continue;
                    }
                    /*********************************结算日期区间界定-end****************************************/

                    try {
                        Thread thread = new Thread(new AgentCAMonthSettlementThread(agentBatchService,
                                agent, lastYear, lastMonth, year, month, monthStartTime, monthEndTime));
                        thread.start();
                    } catch (Exception e) {
//                        log.error("【CA代理商月度结算】CA代理商月度结算线程异常，[代理商ID]=" + agent.getAgtId() + "，异常信息为：" + e.getMessage(), e);
                    }
                    // 休眠3秒，减轻数据库的压力
                    Thread.sleep(3000);
                }
            } else {
//                log.info("【CA代理商月度结算】没有获取到定时任务执行锁:{},ThreadName :{}", batchKey, Thread.currentThread().getName());
            }
        } catch (InterruptedException e) {
//            log.error("【CA代理商月度结算】获取分布式锁异常：" + e.getMessage(), e);
        } finally {
            // 无锁返回
            if (!getLock) {
                return;
            }

            // 有锁进行释放，并进行延时40秒释放
            try {
                Thread.sleep(40000);
            } catch (InterruptedException e) {
                e.printStackTrace();
//                log.error("【CA代理商月度结算】延时释放执行锁异常：" + e.getMessage(), e);
            }

            if (lock != null && lock.isLocked() && lock.isHeldByCurrentThread()) {
                lock.unlock();
//                log.info("【CA代理商月度结算】释放锁完成，锁名称：{},当前线程名称ThreadName :{}", batchKey, Thread.currentThread().getName());
            } else {
//                log.info("【CA代理商月度结算】无锁可释放，当前线程名称ThreadName :{}！！！！！！", Thread.currentThread().getName());
            }
        }
//        log.info("<><><><><><><><><>><><><><>CA代理商月度结算定时任务主线程执行结束<><><><><><><><><>><><><><>");
    }

    /**
     * 代理商合同日期
     *
     * 计算方法：
     * 根据合同开始日期所处结算月第一天和最后一天区间位置 进行三步运算。
     * 分为完全无交叉、居左、居中和居右。
     *
     * @param contractSt 合同开始日期
     * @param contractEd 合同截至日期
     * @param monthStartDate 结算月开始日期，即结算月第一天
     * @param monthEndDate 结算月截至日期，即结算月最后一天
     * @return
     */
    private Map<String, Object> checkContractDate(String contractSt, String contractEd, String monthStartDate,
                                                  String monthEndDate) {
        Map<String,Object> checkResult = new HashMap<String,Object>();
        // 合同起始日期大于合同截至日期
        if(contractSt.compareTo(contractEd) > 0){
            // 非法的合同时间设定。
            checkResult.put("isContinueTask",false);
            return checkResult;
        }

        // 1 完全没有交叉，即全居左或全居右：：合同截止日期小于结算月第一天 或 合同起始日期大于结算月最后一天
        if(contractEd.compareTo(monthStartDate) < 0 || contractSt.compareTo(monthEndDate) > 0){
            checkResult.put("isContinueTask",false);
            return checkResult;
        }

        String monthStartTime = "";
        String monthEndTime = "";

        // 2 居左：：合同起始日期小于结算第一天
        if(contractSt.compareTo(monthStartDate) < 0){
            monthStartTime = monthStartDate + " 00:00:00";
            // 2-1 合同截至日期大于等于结算最后一天
            if(contractEd.compareTo(monthEndDate) >= 0){
                monthEndTime = monthEndDate + " 23:59:59";
            }
            // 2-2 合同截至日期小于结算月最后一天且大于等于结算月第一天
            else if(contractEd.compareTo(monthEndDate) < 0 && contractEd.compareTo(monthStartDate) >= 0){
                monthEndTime = contractEd + " 23:59:59";
            }
            checkResult.put("isContinueTask",true);
            checkResult.put("monthStartTime",monthStartTime);
            checkResult.put("monthEndTime",monthEndTime);
            return checkResult;
        }

        // 3 居中：：合同起始日期大于等于结算月第一天，且小于结算月最后一天
        if(contractSt.compareTo(monthStartDate) >= 0 && contractSt.compareTo(monthEndDate) < 0){
            monthStartTime = contractSt + " 00:00:00";
            // 3-1 合同截至日期大于结算最后一天
            if(contractEd.compareTo(monthEndDate) >= 0){
                monthEndTime = monthEndDate + " 23:59:59";
            }
            // 3-2 合同截至日期小于等于结算月最后一天且大于结算月第一天
            else if(contractEd.compareTo(monthEndDate) < 0 && contractEd.compareTo(monthStartDate) > 0){
                monthEndTime = contractEd + " 23:59:59";
            }
            checkResult.put("isContinueTask",true);
            checkResult.put("monthStartTime",monthStartTime);
            checkResult.put("monthEndTime",monthEndTime);
            return checkResult;
        }

        // 4 居右：：在右方界点。合同起始日期等于结算月最后一天
        if(contractSt.compareTo(monthEndDate) == 0){
            monthStartTime = contractSt + " 00:00:00";
            // 4-1 合同截至日期大于等于结算最后一天
            if(contractEd.compareTo(monthEndDate) >= 0){
                monthEndTime = monthEndDate + " 23:59:59";
            }
            checkResult.put("isContinueTask",true);
            checkResult.put("monthStartTime",monthStartTime);
            checkResult.put("monthEndTime",monthEndTime);
            return checkResult;
        }

        // 其他情况，返回false
        checkResult.put("isContinueTask",false);
        return checkResult;
    }

    /**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@上代理商月度结算，下代理商每日结算@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

    /**
     * 【SA代理商每日结算】
     * SA商户代理商每日结算定时任务
     * !!!特别说明，该任务必须在任务“商户计费信息定时处理任务”定时任务之后（每月2点之后即可）。因为SA代理商结算时要依据代理商户的结算信息
     * <p>
     * 每天3点执行任务  0 0 3 * * ?
     *
     * @date 20191101
     */
//    @Scheduled(cron = "0 0 3 * * ?") //生产
    // @Scheduled(cron = "0 0/30 * * * ?")
    // @Scheduled(cron = "0 30 14 * * ?")
    public void storeAgentDailySettlement() {
//        log.info("<><><><><><><><><>><><><><>开始SA代理商每日结算，定时任务启动<><><><><><><><><>><><><><>");
        String batchKey = "STORE_AGENT_DAILY_SETTLEMENT_KEY";
        RLock lock = redissonUtil.getRLock(batchKey);
        boolean getLock = false;
        try {
            // 零等待取锁，加锁120秒
            if (getLock = lock.tryLock(0, 120, TimeUnit.SECONDS)) {
                // 获取所有SA代理商列表
                List<Agent> agentList = agentQuery.getUsingAgentList("1");
//                log.info("【SA代理商每日结算】待结算SA代理商数量为：" + agentList.size());

                // 获取昨天的日期 yyyy-MM-dd
                String yesterday = DateUtil.getYesterday();
                String dayStartTime = yesterday + " 00:00:00";
                String dayEndTime = yesterday + " 23:59:59";
                String today = DateUtil.getToday();
//                log.info("【SA代理商每日结算】结算日期：{}，结算起始时间：{}，结算结束时间：{}, 当前日期：{}",
                        yesterday, dayStartTime, dayEndTime, today);

                for (Agent agent : agentList) {
                    // 结算日期在SA代理商的合同期间（大于等于起始合同时间且小于等于截止合同时间）
                    if (agent.getContractSt().compareTo(yesterday) <= 0
                            && agent.getContractEd().compareTo(yesterday) >= 0) {
                        try {
                            Thread thread = new Thread(new AgentSADailySettlementThread(agentBatchService,
                                    agent, yesterday, dayStartTime, dayEndTime, today));
                            thread.start();
                        } catch (Exception e) {
                            log.error("【SA代理商每日结算】SA代理商每日结算线程异常，[代理商ID]=" + agent.getAgtId() + "，异常信息为：" + e.getMessage(), e);
                        }
                    }

                    // 休眠3秒，减轻数据库的压力
                    Thread.sleep(3000);
                }
            } else {
//                log.info("【SA代理商每日结算】没有获取到定时任务执行锁:{},ThreadName :{}", batchKey, Thread.currentThread().getName());
            }
        } catch (InterruptedException e) {
//            log.error("【SA代理商每日结算】获取分布式锁异常：" + e.getMessage(), e);
        } finally {
            // 无锁返回
            if (!getLock) {
                return;
            }

            // 有锁进行释放，并进行延时40秒释放
            try {
                Thread.sleep(40000);
            } catch (InterruptedException e) {
                e.printStackTrace();
//                log.error("【SA代理商每日结算】延时释放执行锁异常：" + e.getMessage(), e);
            }

            if (lock != null && lock.isLocked() && lock.isHeldByCurrentThread()) {
                lock.unlock();
//                log.info("【SA代理商每日结算】释放锁完成，锁名称：{},当前线程名称ThreadName :{}", batchKey, Thread.currentThread().getName());
            } else {
//                log.info("【SA代理商每日结算】无锁可释放，当前线程名称ThreadName :{}！！！！！！", Thread.currentThread().getName());
            }
        }
//        log.info("<><><><><><><><><>><><><><>SA代理商每日结算定时任务主线程执行结束<><><><><><><><><>><><><><>");
    }

    /**
     * 【CA代理商每日结算】
     * CA用户代理商每日结算
     * !!!特别说明，该任务必须在任务“商户计费信息定时处理任务”定时任务之后（每月2点之后即可）。因为CA代理商结算时要依据代理商户的结算信息。
     * <p>
     * 每天4点执行任务  0 0 4 * * ?
     *
     * @date 20191101
     */
//    @Scheduled(cron = "0 0 4 * * ?") //生产
    // @Scheduled(cron = "0 0/40 * * * ?")
    // @Scheduled(cron = "0 8 17 * * ?")
    public void customerAgentDailySettlement() {
//        log.info("<><><><><><><><><>><><><><>开始CA代理商每日结算，定时任务启动<><><><><><><><><>><><><><>");
        String batchKey = "CUSTOMER_AGENT_DAILY_SETTLEMENT_KEY";
        RLock lock = redissonUtil.getRLock(batchKey);
        boolean getLock = false;
        try {
            // 零等待取锁，加锁120秒
            if (getLock = lock.tryLock(0, 120, TimeUnit.SECONDS)) {
                // 获取所有CA代理商列表
                List<Agent> agentList = agentQuery.getUsingAgentList("2");
//                log.info("【CA代理商每日结算】待结算CA代理商数量为：" + agentList.size());

                // 获取昨天的日期 yyyy-MM-dd
                String yesterday = DateUtil.getYesterday();
                String dayStartTime = yesterday + " 00:00:00";
                String dayEndTime = yesterday + " 23:59:59";
                String today = DateUtil.getToday();
//                log.info("【CA代理商每日结算】结算日期：{}，结算起始时间：{}，结算结束时间：{}, 当前日期：{}",
//                        yesterday, dayStartTime, dayEndTime, today);

                for (Agent agent : agentList) {
                    // 结算日期在CA代理商的合同期间（大于等于起始合同时间且小于等于截止合同时间）
                    if (agent.getContractSt().compareTo(yesterday) <= 0
                            && agent.getContractEd().compareTo(yesterday) >= 0) {
                        try {
                            Thread thread = new Thread(new AgentCADailySettlementThread(agentBatchService,
                                    agent, yesterday, dayStartTime, dayEndTime, today));
                            thread.start();
                        } catch (Exception e) {
//                            log.error("【CA代理商每日结算】CA代理商每日结算线程异常，[代理商ID]=" + agent.getAgtId() + "，异常信息为：" + e.getMessage(), e);
                        }
                    }

                    // 休眠3秒，减轻数据库的压力
                    Thread.sleep(3000);
                }
            } else {
//                log.info("【CA代理商每日结算】没有获取到定时任务执行锁:{},ThreadName :{}", batchKey, Thread.currentThread().getName());
            }
        } catch (InterruptedException e) {
//            log.error("【CA代理商每日结算】获取分布式锁异常：" + e.getMessage(), e);
        } finally {
            // 无锁返回
            if (!getLock) {
                return;
            }

            // 有锁进行释放，并进行延时40秒释放
            try {
                Thread.sleep(40000);
            } catch (InterruptedException e) {
                e.printStackTrace();
//                log.error("【CA代理商每日结算】延时释放执行锁异常：" + e.getMessage(), e);
            }

            if (lock != null && lock.isLocked() && lock.isHeldByCurrentThread()) {
                lock.unlock();
//                log.info("【CA代理商每日结算】释放锁完成，锁名称：{},当前线程名称ThreadName :{}", batchKey, Thread.currentThread().getName());
            } else {
//                log.info("【CA代理商每日结算】无锁可释放，当前线程名称ThreadName :{}！！！！！！", Thread.currentThread().getName());
            }
        }
//        log.info("<><><><><><><><><>><><><><>CA代理商每日结算定时任务主线程执行结束<><><><><><><><><>><><><><>");
    }

    public static void main(String[] args) {
        String st = "2019-10-28";
        String et = "2019-11-01";
        String yesterday = DateUtil.getYesterday();
        if (st.compareTo(yesterday) <= 0) {
            System.out.println("1");
        }
        if (et.compareTo(yesterday) >= 0) {
            System.out.println("2");
        }
        if (st.compareTo(yesterday) <= 0
                && et.compareTo(yesterday) >= 0) {
            System.out.println("3");
        }
    }
}