<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.basoft.service.dao.wechat.common.WechatMapper">
	<select id="getAccessToken" parameterType="string" resultType="string">
		SELECT TOKEN
		FROM WX_TOKEN
		WHERE SYS_ID = #{sysId}
		AND TOKEN_EXPIRES_DT > SYSDATE
	</select>

	<update id="saveAccessToken" parameterType="com.basoft.core.ware.wechat.domain.AccessToken">
		MERGE INTO WX_TOKEN T1
		USING (SELECT #{SYS_ID} AS a,#{ACCESS_TOKEN} AS b,SYSDATE+110/24/60 as c,SYSDATE as d,SYSDATE as e FROM dual) T2
		ON ( T1.SYS_ID=T2.a)
		WHEN MATCHED THEN
		    UPDATE SET T1.TOKEN = T2.b,T1.TOKEN_EXPIRES_DT = T2.c,T1.UPDATE_DT = T2.e
		WHEN NOT MATCHED THEN
		    INSERT (SYS_ID,TOKEN,TOKEN_EXPIRES_DT,CREATE_DT,UPDATE_DT) VALUES (T2.a, T2.b, T2.c, T2.d, T2.e)
	</update>
	
	<select id="getSessionMemberById" parameterType="string" resultType="com.basoft.core.ware.wechat.domain.user.SessionMember">
	   	SELECT
			A.CUST_SYS_ID as custSysId
			,A.CUST_LOGIN_ID as custLoginId
			,A.WX_IF_OPENID_P AS openid
			,B.SYS_ID AS sysid
			,(select SHOP_ID from WX_APP_INFO T WHERE T.SYS_ID  = B.SYS_ID) AS shopId 
			,A.WX_IF_HEADIMGURL as custImgUrl
			, B.NICKNAME as nickname
		FROM CUST A, WX_USER B
		WHERE A.WX_IF_OPENID_P = B.OPENID
			AND B.OPENID = #{openid}
			AND B.SUBSCRIBE = 1
    </select>
    
    <select id="getSessionMemberByCustId" parameterType="java.lang.Integer" resultType="com.basoft.core.ware.wechat.domain.user.SessionMember">
	   	SELECT
			A.CUST_SYS_ID as custSysId
			,A.CUST_LOGIN_ID as custLoginId
			,A.WX_IF_OPENID_P AS openid
			,B.SYS_ID AS sysid
			,(select SHOP_ID from WX_APP_INFO T WHERE T.SYS_ID  = B.SYS_ID) AS shopId 
			,A.WX_IF_HEADIMGURL as custImgUrl
			, B.NICKNAME as nickname
		FROM  CUST A, WX_USER B
		WHERE A.WX_IF_OPENID_P = B.OPENID
			AND A.CUST_SYS_ID = #{userId}
			AND B.SUBSCRIBE = 1
    </select>
    
    <select id="getUserInfoByOpenid" parameterType="string" resultType="com.basoft.core.ware.wechat.domain.user.WXUser">
	    SELECT
	       OPENID
	      ,SYS_ID
	      ,NICKNAME
	      ,SEX
	      ,SUBSCRIBE
	      ,CITY
	      ,COUNTRY
	      ,PROVINCE
	      ,LANGUAGE
	      ,HEADIMGURL
	      ,SUBSCRIBE_TIME
	      ,UNIONID
	      ,GROUPID
	  	FROM WX_USER
	  	where OPENID = #{openid}
    </select>
    
    <!-- oracle 用户新增或更新 -->
	<select id="userSubscribe" parameterType="com.basoft.core.ware.wechat.domain.user.WXUser" resultType="java.util.Map" statementType="CALLABLE">
		<![CDATA[
			{call WX_BATCH_WECHAT_USER_SUBSCRIBE(
				#{openid,mode=IN,jdbcType=VARCHAR},
				#{sysId,mode=IN,jdbcType=VARCHAR},
				#{unionid,mode=IN,jdbcType=VARCHAR},
				#{nickname,mode=IN,jdbcType=VARCHAR},
				#{sex,mode=IN,jdbcType=VARCHAR},
				#{city,mode=IN,jdbcType=VARCHAR},
				#{country,mode=IN,jdbcType=VARCHAR},
				#{province,mode=IN,jdbcType=VARCHAR},
				#{language,mode=IN,jdbcType=VARCHAR},
				#{headimgurl,mode=IN,jdbcType=VARCHAR},
				#{subscribe_time,mode=IN,jdbcType=TIMESTAMP},
				#{groupid,mode=IN,jdbcType=INTEGER},
				#{remark,mode=IN,jdbcType=VARCHAR}
			)}
		]]>
	</select>
    
    <select id="userUnsubscribe" parameterType="com.basoft.core.ware.wechat.domain.user.WXUser" resultType="java.util.Map" statementType="CALLABLE">
	    <![CDATA[
			 {call WX_BATCH_WECHAT_USER_UNSUBSCRIBE(
			 	#{openid,mode=IN,jdbcType=VARCHAR}
			 )}
	    ]]>
    </select>
    
    <select id="batchUserUnsubscribe" statementType="CALLABLE">
	    <![CDATA[
			 {call WX_BATCH_WECHAT_USER_UNSUBSCRIBE_BATCH(
				 #{sysId,mode=IN,jdbcType=VARCHAR},
				 #{ifStartDate,mode=IN,jdbcType=TIMESTAMP}
			 )}
	    ]]>
    </select>
    
    <!-- Oracle 客户新增或更新 -->
    <select id="saveCust" parameterType="com.basoft.service.entity.customer.cust.Cust" resultType="java.util.HashMap" statementType="CALLABLE">
	    <![CDATA[
			 {call WX_BATCH_CUST_INSERT(
			 	#{shopId,mode=IN,jdbcType=BIGINT},
			 	#{custSysId,mode=IN,jdbcType=BIGINT},
			 	#{custLoginId,mode=IN,jdbcType=VARCHAR},
				#{wxIfOpenidP,mode=IN,jdbcType=VARCHAR},
				#{email,mode=IN,jdbcType=VARCHAR},
				#{mobileNo,mode=IN,jdbcType=VARCHAR},
				#{wxIfIsSubscribe,mode=IN,jdbcType=INTEGER},
				#{wxIfNickNm,mode=IN,jdbcType=VARCHAR},
				#{wxIfSexId,mode=IN,jdbcType=INTEGER},
				#{wxIfLanguage,mode=IN,jdbcType=VARCHAR},
				#{wxIfCountryNm,mode=IN,jdbcType=VARCHAR},
				#{wxIfProvinceNm,mode=IN,jdbcType=VARCHAR},
				#{wxIfCityNm,mode=IN,jdbcType=VARCHAR},
				#{wxIfHeadimgurl,mode=IN,jdbcType=VARCHAR},
				#{wxIfSubscribeTime,mode=IN,jdbcType=TIMESTAMP},
				#{wxIfUnionid,mode=IN,jdbcType=VARCHAR},
				#{wxIfGroupid,mode=IN,jdbcType=BIGINT},
				#{wxIfRemark,mode=IN,jdbcType=BIGINT},
				#{wxSubscribeDt,mode=IN,jdbcType=TIMESTAMP},
				#{wxIdP,mode=IN,jdbcType=VARCHAR},
				#{custNickNm,mode=IN,jdbcType=VARCHAR},
				#{custRealNm,mode=IN,jdbcType=VARCHAR},
				#{pwd,mode=IN,jdbcType=VARCHAR}
			)}
	    ]]>
    </select>
    
    <!-- 20180705 -->
	<insert id="insertTextMsg" parameterType="com.basoft.core.ware.wechat.domain.msg.Text">
		INSERT INTO WX_RECEIVE_MESSAGE
	    	(ID
	    	,SYS_ID
	        ,MSG_ID
	        ,FROM_TYPE
	        ,FROM_USER
	        ,TO_USER
	        ,MSG_TYPE
	        ,CONTENT
	        ,RECEIVE_DT)
	     VALUES
	        (#{id,jdbcType=BIGINT}
	        ,#{sysId,jdbcType=VARCHAR}
	        ,#{msgId,jdbcType=VARCHAR}
	        ,1
	        ,#{fromUserName,jdbcType=VARCHAR}
	        ,#{toUserName,jdbcType=VARCHAR}
	        ,#{msgType,jdbcType=VARCHAR}
	        ,#{content,jdbcType=VARCHAR}
	        ,sysdate)
 	</insert>
 	
 	<!-- 关注回复 -->
    <select id="getFocusMessage" resultType="java.util.HashMap">
		SELECT M.SHOP_ID,
	    	M.MESSAGE_ID,
	    	M.MSG_GROUP,
	    	M.MSG_TITLE,
	    	M.SEND_FILE_TYPE,
	    	M.MATERIAL_FILE_ID,
	    	M.MATERIAL_FILE_WX_ID,
	    	M.COVER_PAGE_ID,
	    	M.SHOP_GOODS_URL,
			M.SEND_MSG_BODY,
			M.SEND_TYPE,
			M.SEND_TYPE_ID
		FROM WX_MESSAGE M
		WHERE M.MSG_GROUP='FOCUS'
			AND M.IS_DELETE = 0
			AND M.SHOP_ID= #{shopId}
    </select>
    
    <!-- 关键字回复 -->
    <select id="getKeyWordMessage" resultType="java.util.HashMap">
    	SELECT K.SHOP_ID,
	    	K.KEYWORD_ID,
	    	K.MESSAGE_ID,
	    	K.KEYWORD,
	    	K.TABLE_NM,
	    	M.MSG_GROUP,
	    	M.MSG_TITLE,
	    	M.SEND_FILE_TYPE,
	    	M.MATERIAL_FILE_ID,
	    	M.MATERIAL_FILE_WX_ID,
	    	M.COVER_PAGE_ID,
	    	M.SHOP_GOODS_URL,
			M.SEND_MSG_BODY,
			M.SEND_TYPE,
			M.SEND_TYPE_ID
		FROM WX_MESSAGE_KEYWORD K INNER JOIN WX_MESSAGE M ON K.MESSAGE_ID= M.MESSAGE_ID AND K.SHOP_ID = M.SHOP_ID
		WHERE M.MSG_GROUP='KEYWORD'
			AND M.IS_DELETE = 0
			AND K.KEYWORD = #{keyWord}
			AND K.SHOP_ID= #{shopId}
    </select>
    
    <!-- 自动回复 -->
    <select id="getAutoMessage" resultType="java.util.HashMap">
		SELECT M.SHOP_ID,
	    	M.MESSAGE_ID,
	    	M.MSG_GROUP,
	    	M.MSG_TITLE,
	    	M.SEND_FILE_TYPE,
	    	M.MATERIAL_FILE_ID,
	    	M.MATERIAL_FILE_WX_ID,
	    	M.COVER_PAGE_ID,
	    	M.SHOP_GOODS_URL,
			M.SEND_MSG_BODY,
			M.SEND_TYPE,
			M.SEND_TYPE_ID
		FROM WX_MESSAGE M
		WHERE M.MSG_GROUP='AUTO'
			AND M.IS_DELETE = 0
			AND M.SHOP_ID= #{shopId}
    </select>
    
    <update id="updateMediaId" parameterType="java.util.HashMap">
		 UPDATE WX_SYS_FILE
		 SET  MEDIA_ID = #{mediaId}
		 	,MEDIA_UP_DT = sysdate
		 WHERE FILE_ID = #{fileId}
	</update>


	<!--图文群发每日数据 并插入-->
	<insert id="insertArticleSummary" parameterType="com.basoft.core.ware.wechat.domain.statistic.ArticleSummary">
		<!--insert into wx_if_message_stats_data (REF_DATE, MSGID, SHOP_ID,
		WX_MSGID, WX_NEWSID, MSG_ID,
		NEWS_ID, INT_PAGE_READ_USER, INT_PAGE_READ_COUNT,
		ORI_PAGE_READ_USER, ORI_PAGE_READ_COUNT, SHARE_USER,
		SHARE_COUNT, ADD_TO_FAV_USER, ADD_TO_FAV_COUNT,
		USER_SOURCE, TITLE,CREATE_DT)
		values (#{ref_date}, #{msgid}, #{shopId},
		#{wx_msgid}, #{wx_newsid}, #{msgId},
		#{newsId,jdbcType=BIGINT}, #{int_page_read_user}, #{int_page_read_count},
		#{ori_page_read_user}, #{ori_page_read_count}, #{share_user},
		#{share_count}, #{add_to_fav_user}, #{add_to_fav_count},
		#{user_source}, #{title},SYSDATE)-->
		INSERT INTO WX_IF_MESSAGE_STATS_DATA
		  (REF_DATE,
		   MSGID,
		   SHOP_ID,
		   WX_MSGID,
		   WX_NEWSID,
		   MSG_ID,
		   NEWS_ID,
		   INT_PAGE_READ_USER,
		   INT_PAGE_READ_COUNT,
		   ORI_PAGE_READ_USER,
		   ORI_PAGE_READ_COUNT,
		   SHARE_USER,
		   SHARE_COUNT,
		   ADD_TO_FAV_USER,
		   ADD_TO_FAV_COUNT,
		   USER_SOURCE,
		   TITLE,
		   CREATE_DT)
		VALUES
		  (#{ref_date},
		   #{msgid},
		   #{shopId},
		   #{wx_msgid},
		   #{wx_newsid},
		   #{msgId},
		   #{newsId,
		   jdbcType = BIGINT},
		   #{int_page_read_user},
		   #{int_page_read_count},
		   #{ori_page_read_user},
		   #{ori_page_read_count},
		   #{share_user},
		   #{share_count},
		   #{add_to_fav_user},
		   #{add_to_fav_count},
		   #{user_source},
		   #{title},
		   SYSDATE)
	</insert>

	<select id="getMaxWxIfMsgStasDetailId" resultType="java.lang.Long">
		SELECT NVL(MAX("id"),1) AS id FROM  WX_IF_MESSAGE_STATS_DETAIL
	</select>
	
	<!-- 添加图文发送统计总数 -->
	<insert  id="insertArticleSummaryStatics" parameterType="com.basoft.core.ware.wechat.domain.statistic.ArticleGroupDetails" >
		INSERT INTO WX_IF_MESSAGE_STATS_DETAIL
		  ("id",
		   REF_DATE,
		   REF_HOUR,
		   MSGID,
		   SHOP_ID,
		   TITLE,
		   STAT_DATE,
		   TARGET_USER,
		   INT_PAGE_READ_USER,
		   INT_PAGE_READ_COUNT,
		   ORI_PAGE_READ_USER,
		   ORI_PAGE_READ_COUNT,
		   SHARE_USER,
		   SHARE_COUNT,
		   ADD_TO_FAV_USER,
		   ADD_TO_FAV_COUNT,
		   INT_PAGE_FROM_SESSION_READ_USER,
		   INT_PAGE_FROM_SESSION_READ_COUNT,
		   INT_PAGE_FROM_HIST_MSG_READ_USER,
		   INT_PAGE_FROM_HIST_MSG_READ_COUNT,
		   INT_PAGE_FROM_FEED_READ_USER,
		   INT_PAGE_FROM_FEED_READ_COUNT,
		   INT_PAGE_FROM_FRIENDS_READ_USER,
		   INT_PAGE_FROM_FRIENDS_READ_COUNT,
		   INT_PAGE_FROM_OTHER_READ_USER,
		   INT_PAGE_FROM_OTHER_READ_COUNT,
		   FEED_SHARE_FROM_SESSION_USER,
		   FEED_SHARE_FROM_SESSION_CNT,
		   FEED_SHARE_FROM_FEED_USER,
		   FEED_SHARE_FROM_FEED_CNT,
		   FEED_SHARE_FROM_OTHER_USER,
		   FEED_SHARE_FROM_OTHER_CNT,
		   USER_SOURCE,
		   INT_PAGE_FROM_KANYIKAN_READ_USER,
		   INT_PAGE_FROM_KANYIKAN_READ_COUNT,
		   INT_PAGE_FROM_SOUYISOU_READ_USER,
		   INT_PAGE_FROM_SOUYISOU_READ_COUNT,
		   CREATE_DT)
		values
		  (#{id,
		   jdbcType = BIGINT},
		   to_date(#{ref_date, jdbcType = TIMESTAMP}, 'yyyy-mm-dd'),
		   #{ref_hour,jdbcType = VARCHAR},
		   #{msgid,jdbcType = VARCHAR},
		   #{shopId},
		   #{title,jdbcType = VARCHAR},
		   to_date(#{stat_date, jdbcType = TIMESTAMP}, 'yyyy-mm-dd'),
		   #{target_user,jdbcType = INTEGER},
		   #{int_page_read_user,jdbcType = INTEGER},
		   #{int_page_read_count,jdbcType = INTEGER},
		   #{ori_page_read_user,jdbcType = INTEGER},
		   #{ori_page_read_count,jdbcType = INTEGER},
		   #{share_user,jdbcType = INTEGER},
		   #{share_count,jdbcType = INTEGER},
		   #{add_to_fav_user,jdbcType = INTEGER},
		   #{add_to_fav_count,jdbcType = INTEGER},
		   #{int_page_from_session_read_user,jdbcType = INTEGER},
		   #{int_page_from_session_read_count,jdbcType = INTEGER},
		   #{int_page_from_hist_msg_read_user,jdbcType = INTEGER},
		   #{int_page_from_hist_msg_read_count,jdbcType = INTEGER},
		   #{int_page_from_feed_read_user,jdbcType = INTEGER},
		   #{int_page_from_feed_read_count,jdbcType = INTEGER},
		   #{int_page_from_friends_read_user,jdbcType = INTEGER},
		   #{int_page_from_friends_read_count,jdbcType = INTEGER},
		   #{int_page_from_other_read_user,jdbcType = INTEGER},
		   #{int_page_from_other_read_count,jdbcType = INTEGER},
		   #{feed_share_from_session_user,jdbcType = INTEGER},
		   #{feed_share_from_session_cnt,jdbcType = INTEGER},
		   #{feed_share_from_feed_user,jdbcType = INTEGER},
		   #{feed_share_from_feed_cnt,jdbcType = INTEGER},
		   #{feed_share_from_other_user,jdbcType = INTEGER},
		   #{feed_share_from_other_cnt,jdbcType = INTEGER},
		   #{userSource,jdbcType = INTEGER},
		   #{int_page_fromkanyikan_read_user,jdbcType = INTEGER},
		   #{int_page_fromkanyikan_read_count,jdbcType = INTEGER},
		   #{int_page_souyisou_read_user,jdbcType = INTEGER},
		   #{int_page_souyisou_read_count,jdbcType = INTEGER},
		   SYSDATE)
	</insert>

	<select id="getMaxWxIfMsgWeekId" resultType="java.lang.Long">
		SELECT  nvl(max(id),0)as id from wx_if_get_upstream_msg_week
	</select>

	<!--  插入统计周数据 -->
	<insert id="insertBatchStreamMsgWeekList" parameterType="com.basoft.core.ware.wechat.domain.statistic.WxIfStreamMsgStatsData">
		INSERT INTO WX_IF_GET_UPSTREAM_MSG_WEEK
		  (id,
		   SHOP_ID,
		   REF_DATE,
		   MSG_TYPE,
		   MSG_USER,
		   MSG_COUNT,
		   COUNT_INTERVAL,
		   TIME_TYPE,
		   CREATE_DT)
		values
		  (#{id},
		   #{shopId,jdbcType = BIGINT},
		   #{ref_date,jdbcType = VARCHAR},
		   #{msg_type,jdbcType = TINYINT},
		   #{msg_user,jdbcType = VARCHAR},
		   #{msg_count,jdbcType = INTEGER},
		   #{count_interval,jdbcType = TINYINT},
		   #{time_Type,jdbcType = TINYINT},
		   SYSDATE)
	</insert>

	<!--  插入用户发送消息统计 -->
	<insert id="insertBatchStreamMsgList" parameterType="com.basoft.core.ware.wechat.domain.statistic.WxIfStreamMsgStatsData">
		INSERT INTO WX_IF_STREAM_MSG_STATS_DATA
		  (SHOP_ID,
		   REF_DATE,
		   REF_HOUR,
		   MSG_TYPE,
		   MSG_USER,
		   MSG_COUNT,
		   COUNT_INTERVAL,
		   TIME_TYPE,
		   CREATED_DT)
		VALUES
		  (#{shopId,jdbcType = BIGINT},
		   #{ref_date,jdbcType = VARCHAR},
		   #{ref_hour,jdbcType = VARCHAR},
		   #{msg_type,jdbcType = TINYINT},
		   #{msg_user,jdbcType = VARCHAR},
		   #{msg_count,jdbcType = INTEGER},
		   #{count_interval,jdbcType = TINYINT},
		   #{time_Type,jdbcType = TINYINT},
		   SYSDATE)
	</insert>
	
	<!-- ******************************************************定时任务锁 START************************************************************ -->
	<!-- 查询定时任务锁状态 -->
	<select id="selectWxBatchLock" resultType="string">
	  <!-- 状态为0则返回0；状态为1时，如果未过期则返回1，如果过期则返回0；状态为其他则返回0 -->
	  SELECT CASE WHEN IS_RUN = '0' THEN '0'
                  WHEN IS_RUN = '1' THEN
                    CASE WHEN RUN_EXPIRES_DT > SYSDATE THEN '1'
                    ELSE '0' END
             ELSE '0' END AS ISRUN
      FROM WX_BATCH_LOCK
      WHERE SYS_ID = #{sysId}
			AND BATCH_TYPE = #{batchType}
	</select>
	
	<!--  新增定时任务锁-加锁状态 -->
	<insert id="insertWxBatchLockStart">
		INSERT INTO WX_BATCH_LOCK
		  (SYS_ID,
		   BATCH_TYPE,
		   IS_RUN,
		   RUN_EXPIRES_DT,
		   CREATE_DT)
		VALUES
		  (#{sysId,jdbcType = VARCHAR},
		   #{batchType,jdbcType = INTEGER},
		   '1',
		   SYSDATE + #{expires}/(24*60),
		   SYSDATE)
	</insert>
	
	<!-- 更新定时任务锁-加锁状态 -->
	<update id="updateWxBatchLockStart">
		UPDATE WX_BATCH_LOCK
		SET IS_RUN = '1',
			RUN_EXPIRES_DT = sysdate + #{expires}/(24*60),
			UPDATE_DT = SYSDATE
		WHERE SYS_ID = #{sysId}
			AND BATCH_TYPE = #{batchType}
	</update>
	
	<!-- 更新定时任务锁-非加锁状态 -->
	<update id="updateWxBatchLockEnd">
		UPDATE WX_BATCH_LOCK
		SET IS_RUN = '0',
			RUN_EXPIRES_DT = NULL,
			UPDATE_DT = SYSDATE
		WHERE SYS_ID = #{sysId}
			AND BATCH_TYPE = #{batchType}
	</update>
	<!-- ******************************************************定时任务锁 END************************************************************ -->
</mapper>